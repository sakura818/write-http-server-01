package jp.co.topgate.sugawara.web;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class HttpServer {

    private static final int PORT = 8080;
    ServerSocket serverSocket = null;
    Socket socket = null;
    private List<String> lines;

    private List<String> getList() {

        return lines;
    }

    public void connection() throws IOException {
        System.out.println("start up http server http://localhost:8080");
        try {
            ServerSocket serverSocket = new ServerSocket(PORT);

            while (true) {

                this.socket = this.serverSocket.accept();
                System.out.println("request incoming");

                //Request;
                InputStream inputStream = this.socket.getInputStream();
                try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {

                    //lines = new ArrayList<>();
                    List<String> lines = new ArrayList<>();
                    String line;
                    while (!(line = br.readLine()).equals("")) {
                        System.out.println(line);
                        lines.add(line);
                    }
                    //HttpRequest httpRequest = new HttpRequest();
                    HttpRequest httpRequest = new HttpRequest(lines);

                }
                for (int i = 0; i < lines.size(); i++) {
                    System.out.println(String.valueOf(i) + ":" + lines.get(i));
                }

                HttpRequest request = new HttpRequest();

                //Response
                OutputStream outputStream = this.socket.getOutputStream();
                HttpResponse httpResponse = new HttpResponse();
                //outputStream.write((byte)"http response data");

            }
        } catch (IOException e) {
            System.out.println("正常にコネクションできないエラーが発生しました");
        } finally {
            this.socket.close();
            this.serverSocket.close();
        }

    }
}



