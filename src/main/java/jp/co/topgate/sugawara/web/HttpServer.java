package jp.co.topgate.sugawara.web;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class HttpServer {

    private static final int PORT = 8080;//privateは自分自身のクラスのみアクセスを許可する　staticは静的フィールド（フィールド変数の実体がクラスに準備される）
    ServerSocket serverSocket = null;
    Socket socket = null;



    public void connection() throws IOException {
        System.out.println("start up http server http://localhost:8080");
        try {
            ServerSocket serverSocket = new ServerSocket(PORT);

            BufferedReader br = null;

            while (true) {

                this.socket = serverSocket.accept();
                System.out.println("request incoming");

                HttpRequest httpRequest;
                //request
                InputStream inputStream = this.socket.getInputStream();//?
                br = new BufferedReader(new InputStreamReader(
                        socket.getInputStream()));

                List<String> lines = new ArrayList<>();
                String line;
                while (!(line = br.readLine()).equals("")) {
                    System.out.println(line);
                    lines.add(line);
                }
                httpRequest = new HttpRequest(lines);

                //response
                PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
                StringBuilder builder = new StringBuilder();

                builder.append("HTTP/1.1 200 OK").append("\n");
                builder.append("Content-Type: text/html").append("\n");
                builder.append("\n");
                builder.append("<html><head><title>Hello world!</title></head><body><h1>Hello world!</h1>Hi!</body></html>");

                //System.out.println("responce...");
                //System.out.println(builder.toString() + "\n");
                writer.println(builder.toString());

                socket.close();
            }
        } catch (Throwable e) {
            e.printStackTrace();
            System.out.println("正常にコネクションできないエラーが発生しました");
        } finally {
            try {
                socket.close();
                serverSocket.close();
            } catch (IOException e) {
                System.out.println("ソケットを閉じれないエラーが発生しました");
            }

        }
    }
}


